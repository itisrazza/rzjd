// rzjd - Razza's Johnny.Decimal Management System
// Copyright (C) 2025 Raresh Nistor
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

package jdex

import (
	"fmt"
	"io"
	"maps"
	"slices"
)

func (jdex *Jdex) Save(w io.Writer) (err error) {
	fmt.Fprintf(w, "// this index is managed by rzjd. do not edit this file.\n\n")

	for _, areaID := range slices.Sorted(maps.Keys(jdex.Areas)) {
		area := jdex.Areas[areaID]

		_, err = fmt.Fprintf(w, "%s %s\n", area.ID, area.Name)
		if err != nil {
			return
		}

		for _, categoryID := range slices.Sorted(maps.Keys(area.Categories)) {
			category := area.Categories[categoryID]

			_, err = fmt.Fprintf(w, "  %s %s\n", category.ID, category.Name)
			if err != nil {
				return
			}

			for _, entryID := range slices.Sorted(maps.Keys(category.Entries)) {
				entry := category.Entries[entryID]

				_, err = fmt.Fprintf(w, "    %s %s\n", entry.ID, entry.Name)
				if err != nil {
					return
				}

				for key, value := range entry.Metadata {
					_, err = fmt.Fprintf(w, "      - %s: %s\n", key, value)
					if err != nil {
						return
					}
				}
			}
		}
	}

	return
}
